#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.6
#  in conjunction with Tcl version 8.6
#    Dec 16, 2022 01:33:22 AM CST  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
import pandas as pd
from tkinter.constants import *
import os.path
import cv2
from PIL import Image, ImageDraw, ImageFont
import csv
import pyzbar.pyzbar as pyzbar
import numpy
import time
import member_support

import re
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium import webdriver
from bs4 import BeautifulSoup 
from selenium.webdriver.common.keys import Keys
from transformers import pipeline


_script = sys.argv[0]
_location = os.path.dirname(_script)
df = pd.read_csv('testdata2.csv',header=None) 

import unknown_support
import record

_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
_fgcolor = '#000000'  # X11 color: 'black'
_compcolor = 'gray40' # X11 color: #666666
_ana1color = '#c3c3c3' # Closest X11 color: 'gray76'
_ana2color = 'beige' # X11 color: #f5f5dc
_tabfg1 = 'black' 
_tabfg2 = 'black' 
_tabbg1 = 'grey75' 
_tabbg2 = 'grey89' 
_bgmode = 'light' 

class Homepage:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("600x450+273+146")
        top.minsize(120, 1)
        top.maxsize(1284, 681)
        top.resizable(1,  1)
        top.title("錢包管家系統")
        top.configure(relief="ridge")
        top.configure(background="#faf4e0")
        top.configure(highlightbackground="#faf4e0")
        top.configure(highlightcolor="black")

        self.top = top

        self.Button_scan = tk.Button(self.top)
        self.Button_scan.place(relx=0.233, rely=0.489, height=54, width=108)
        self.Button_scan.configure(activebackground="#6cc2f7")
        self.Button_scan.configure(activeforeground="black")
        self.Button_scan.configure(background="#b5e0fb")
        self.Button_scan.configure(compound='left')
        self.Button_scan.configure(disabledforeground="#a3a3a3")
        self.Button_scan.configure(foreground="#000000")
        self.Button_scan.configure(highlightbackground="#d9d9d9")
        self.Button_scan.configure(highlightcolor="black")
        self.Button_scan.configure(command=unknown_support.BarcodeWin)
        self.Button_scan.configure(pady="0")
        self.Button_scan.configure(relief="groove")
        self.Button_scan.configure(text='''載具記帳''')
        self.Button_record = tk.Button(self.top)
        self.Button_record.place(relx=0.567, rely=0.489, height=54, width=108)
        self.Button_record.configure(activebackground="#6cc2f7")
        self.Button_record.configure(activeforeground="black")
        self.Button_record.configure(background="#b5e0fb")
        self.Button_record.configure(command=unknown_support.RecordMenu)
        self.Button_record.configure(compound='center')
        self.Button_record.configure(disabledforeground="#a3a3a3")
        self.Button_record.configure(foreground="#000000")
        self.Button_record.configure(highlightbackground="#d9d9d9")
        self.Button_record.configure(highlightcolor="black")
        self.Button_record.configure(pady="0")
        self.Button_record.configure(relief="groove")
        self.Button_record.configure(text='''消費紀錄與分析''')
        self.Button_demand = tk.Button(self.top)
        self.Button_demand.place(relx=0.233, rely=0.667, height=54, width=108)
        self.Button_demand.configure(activebackground="#6cc2f7")
        self.Button_demand.configure(activeforeground="black")
        self.Button_demand.configure(background="#b5e0fb")
        self.Button_demand.configure(compound='left')
        self.Button_demand.configure(disabledforeground="#a3a3a3")
        self.Button_demand.configure(foreground="#000000")
        self.Button_demand.configure(highlightbackground="#d9d9d9")
        self.Button_demand.configure(highlightcolor="black")
        self.Button_demand.configure(pady="0")
        self.Button_demand.configure(relief="groove")
        self.Button_demand.configure(text='''需求分析''')
        self.Button_demand.configure(command= demand_analysis)


        self.Button_user = tk.Button(self.top)
        self.Button_user.place(relx=0.567, rely=0.667, height=54, width=108)
        self.Button_user.configure(activebackground="#6cc2f7")
        self.Button_user.configure(activeforeground="black")
        self.Button_user.configure(background="#b5e0fb")
        self.Button_user.configure(command=unknown_support.UserWin)
        self.Button_user.configure(compound='center')
        self.Button_user.configure(disabledforeground="#a3a3a3")
        self.Button_user.configure(foreground="#000000")
        self.Button_user.configure(highlightbackground="#d9d9d9")
        self.Button_user.configure(highlightcolor="black")
        self.Button_user.configure(pady="0")
        self.Button_user.configure(relief="groove")
        self.Button_user.configure(text='''會員頁面''')
        self.Button_user.configure(command=memberpage)
        self.icon = tk.Label(self.top)
        self.icon.place(relx=0.367, rely=0.156, height=101, width=117)
        self.icon.configure(activebackground="#f9f9f9")
        self.icon.configure(anchor='w')
        self.icon.configure(background="#faf4e0")
        self.icon.configure(compound='left')
        self.icon.configure(disabledforeground="#a3a3a3")
        self.icon.configure(foreground="#000000")
        self.icon.configure(highlightbackground="#d9d9d9")
        self.icon.configure(highlightcolor="black")
        photo_location = os.path.join(_location,"./111.png")
        global _img0
        _img0 = tk.PhotoImage(file=photo_location)
        self.icon.configure(image=_img0)
        self.icon.configure(text='''Label''')
        self.title = tk.Label(self.top)
        self.title.place(relx=0.383, rely=0.378, height=21, width=127)
        self.title.configure(activebackground="#f9f9f9")
        self.title.configure(anchor='w')
        self.title.configure(background="#faf4e0")
        self.title.configure(compound='left')
        self.title.configure(disabledforeground="#a3a3a3")
        self.title.configure(font="-family {微軟正黑體} -size 15 -weight bold")
        self.title.configure(foreground="#000000")
        self.title.configure(highlightbackground="#d9d9d9")
        self.title.configure(highlightcolor="black")
        self.title.configure(text='''錢包管家系統''')
        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

def memberpage():
    member_support.main()
    from tkinter import ttk 
    windowmember = tk.Tk()
    windowmember = tk.Tk()
    windowmember.geometry("600x450+340+90")
    windowmember.minsize(120, 1)
    windowmember.maxsize(1284, 701)
    windowmember.resizable(1,  1)
    windowmember.title("Toplevel 0")
    windowmember.configure(background="#faf4e0")
    windowmember.configure(highlightbackground="#faf4e0")
    windowmember.configure(highlightcolor="black")

    #windowmember.top = top

    windowmember.Frame1 = tk.Frame(windowmember.top)
    windowmember.Frame1.place(relx=0.233, rely=0.244, relheight=0.078
            , relwidth=0.542)
    windowmember.Frame1.configure(relief='groove')
    windowmember.Frame1.configure(borderwidth="2")
    windowmember.Frame1.configure(relief="groove")
    windowmember.Frame1.configure(background="#b5e0fb")
    windowmember.Frame1.configure(highlightbackground="#d9d9d9")
    windowmember.Frame1.configure(highlightcolor="black")
    windowmember.Label1 = tk.Label(windowmember.Frame1)
    windowmember.Label1.place(relx=0.338, rely=0.286, height=21, width=153)
    windowmember.Label1.configure(activebackground="#f9f9f9")
    windowmember.Label1.configure(anchor='w')
    windowmember.Label1.configure(background="#b5e0fb")
    windowmember.Label1.configure(compound='left')
    windowmember.Label1.configure(disabledforeground="#a3a3a3")
    windowmember.Label1.configure(foreground="#000000")
    windowmember.Label1.configure(highlightbackground="#d9d9d9")
    windowmember.Label1.configure(highlightcolor="black")
    windowmember.Label1.configure(text='''歡迎登入錢包管家''')
    windowmember.Label2 = tk.Label(windowmember.top)
    windowmember.Label2.place(relx=0.25, rely=0.378, height=21, width=77)
    windowmember.Label2.configure(activebackground="#f9f9f9")
    windowmember.Label2.configure(anchor='w')
    windowmember.Label2.configure(background="#faf4e0")
    windowmember.Label2.configure(compound='left')
    windowmember.Label2.configure(disabledforeground="#a3a3a3")
    windowmember.Label2.configure(foreground="#000000")
    windowmember.Label2.configure(highlightbackground="#d9d9d9")
    windowmember.Label2.configure(highlightcolor="black")
    windowmember.Label2.configure(text='''會員帳號''')
    windowmember.Label3 = tk.Label(windowmember.top)
    windowmember.Label3.place(relx=0.25, rely=0.467, height=21, width=77)
    windowmember.Label3.configure(activebackground="#f9f9f9")
    windowmember.Label3.configure(anchor='w')
    windowmember.Label3.configure(background="#faf4e0")
    windowmember.Label3.configure(compound='left')
    windowmember.Label3.configure(disabledforeground="#a3a3a3")
    windowmember.Label3.configure(foreground="#000000")
    windowmember.Label3.configure(highlightbackground="#d9d9d9")
    windowmember.Label3.configure(highlightcolor="black")
    windowmember.Label3.configure(text='''會員密碼''')
    windowmember.Text1 = tk.Text(windowmember.top)
    windowmember.Text1.place(relx=0.35, rely=0.378, relheight=0.053, relwidth=0.357)
    windowmember.Text1.configure(background="white")
    windowmember.Text1.configure(font="TkTextFont")
    windowmember.Text1.configure(foreground="black")
    windowmember.Text1.configure(highlightbackground="#d9d9d9")
    windowmember.Text1.configure(highlightcolor="black")
    windowmember.Text1.configure(insertbackground="black")
    windowmember.Text1.configure(selectbackground="#c4c4c4")
    windowmember.Text1.configure(selectforeground="black")
    windowmember.Text1.configure(wrap="word")
    windowmember.Text2 = tk.Text(windowmember.top)
    windowmember.Text2.place(relx=0.35, rely=0.467, relheight=0.053, relwidth=0.357)
    windowmember.Text2.configure(background="white")
    windowmember.Text2.configure(font="TkTextFont")
    windowmember.Text2.configure(foreground="black")
    windowmember.Text2.configure(highlightbackground="#d9d9d9")
    windowmember.Text2.configure(highlightcolor="black")
    windowmember.Text2.configure(insertbackground="black")
    windowmember.Text2.configure(selectbackground="#c4c4c4")
    windowmember.Text2.configure(selectforeground="black")
    windowmember.Text2.configure(wrap="word")
    windowmember.Button1 = tk.Button(windowmember.top)
    windowmember.Button1.place(relx=0.317, rely=0.6, height=34, width=88)
    windowmember.Button1.configure(activebackground="beige")
    windowmember.Button1.configure(activeforeground="black")
    windowmember.Button1.configure(background="#b5e0fb")
    windowmember.Button1.configure(command=member_support.onClickSignBtn)
    windowmember.Button1.configure(compound='left')
    windowmember.Button1.configure(disabledforeground="#a3a3a3")
    windowmember.Button1.configure(foreground="#000000")
    windowmember.Button1.configure(highlightbackground="#d9d9d9")
    windowmember.Button1.configure(highlightcolor="black")
    windowmember.Button1.configure(pady="0")
    windowmember.Button1.configure(text='''註冊''')
    windowmember.Button2 = tk.Button(windowmember.top)
    windowmember.Button2.place(relx=0.567, rely=0.6, height=34, width=88)
    windowmember.Button2.configure(activebackground="beige")
    windowmember.Button2.configure(activeforeground="black")
    windowmember.Button2.configure(background="#b5e0fb")
    windowmember.Button2.configure(command=member_support.onClickLogBtn)
    windowmember.Button2.configure(compound='left')
    windowmember.Button2.configure(disabledforeground="#a3a3a3")
    windowmember.Button2.configure(foreground="#000000")
    windowmember.Button2.configure(highlightbackground="#d9d9d9")
    windowmember.Button2.configure(highlightcolor="black")
    windowmember.Button2.configure(pady="0")
    windowmember.Button2.configure(text='''登入''')
        


class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("600x450+378+149")
        top.minsize(120, 1)
        top.maxsize(1284, 701)
        top.resizable(1,  1)
        top.title("消費紀錄與分析")
        top.configure(background="#faf4e0")
        top.configure(highlightbackground="#faf4e0")
        top.configure(highlightcolor="black")

        self.top = top

        self.Button_record = tk.Button(self.top)
        self.Button_record.place(relx=0.2, rely=0.622, height=54, width=128)
        self.Button_record.configure(activebackground="#6cc2f7")
        self.Button_record.configure(activeforeground="black")
        self.Button_record.configure(background="#b5e0fb")
        self.Button_record.configure(command=unknown_support.checkRecord)
        self.Button_record.configure(compound='left')
        self.Button_record.configure(disabledforeground="#a3a3a3")
        self.Button_record.configure(font="-family {微軟正黑體} -size 9")
        self.Button_record.configure(foreground="#000000")
        self.Button_record.configure(highlightbackground="#d9d9d9")
        self.Button_record.configure(highlightcolor="black")
        self.Button_record.configure(pady="0")
        self.Button_record.configure(relief="groove")
        self.Button_record.configure(text='''消費記錄明細''')
        self.Button_analysis = tk.Button(self.top)
        self.Button_analysis.place(relx=0.6, rely=0.622, height=54, width=128)
        self.Button_analysis.configure(activebackground="#6cc2f7")
        self.Button_analysis.configure(activeforeground="black")
        self.Button_analysis.configure(background="#b5e0fb")
        self.Button_analysis.configure(command=unknown_support.checkAnalysis)
        self.Button_analysis.configure(compound='left')
        self.Button_analysis.configure(disabledforeground="#a3a3a3")
        self.Button_analysis.configure(font="-family {微軟正黑體} -size 10")
        self.Button_analysis.configure(foreground="#000000")
        self.Button_analysis.configure(highlightbackground="#d9d9d9")
        self.Button_analysis.configure(highlightcolor="black")
        self.Button_analysis.configure(pady="0")
        self.Button_analysis.configure(relief="groove")
        self.Button_analysis.configure(text='''消費習慣分析''')
        self.pic1 = tk.Label(self.top)
        self.pic1.place(relx=0.2, rely=0.289, height=121, width=127)
        self.pic1.configure(activebackground="#f9f9f9")
        self.pic1.configure(anchor='w')
        self.pic1.configure(background="#faf4e0")
        self.pic1.configure(compound='left')
        self.pic1.configure(disabledforeground="#a3a3a3")
        self.pic1.configure(foreground="#000000")
        self.pic1.configure(highlightbackground="#d9d9d9")
        self.pic1.configure(highlightcolor="black")
        photo_location = os.path.join(_location,"./record.png")
        global _img1
        _img1 = tk.PhotoImage(file=photo_location)
        self.pic1.configure(image=_img1)
        self.pic1.configure(text='''Label''')
        self.pic2 = tk.Label(self.top)
        self.pic2.place(relx=0.567, rely=0.289, height=121, width=147)
        self.pic2.configure(activebackground="#f9f9f9")
        self.pic2.configure(anchor='w')
        self.pic2.configure(background="#faf4e0")
        self.pic2.configure(compound='left')
        self.pic2.configure(disabledforeground="#a3a3a3")
        self.pic2.configure(foreground="#000000")
        self.pic2.configure(highlightbackground="#d9d9d9")
        self.pic2.configure(highlightcolor="black")
        photo_location = os.path.join(_location,"./analysis.png")
        global _img2
        _img2 = tk.PhotoImage(file=photo_location)
        self.pic2.configure(image=_img2)
        self.pic2.configure(text='''Label''')
        

class BarcodeWin:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("600x450+289+152")
        top.minsize(120, 1)
        top.maxsize(1284, 681)
        top.resizable(1,  1)
        top.title("載具條碼")
        top.configure(background="#ffffff")

        self.top = top

        self.Label3 = tk.Label(self.top)
        self.Label3.place(relx=0.05, rely=0.333, height=131, width=557)
        self.Label3.configure(anchor='w')
        self.Label3.configure(background="#ffffff")
        self.Label3.configure(compound='left')
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        photo_location = os.path.join(_location,"./載具條碼.png")
        global _img3
        _img3 = tk.PhotoImage(file=photo_location)
        self.Label3.configure(image=_img3)



class DetailWin:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("599x450+174+162")
        top.minsize(120, 1)
        top.maxsize(1284, 701)
        top.resizable(1,  1)
        top.title("消費紀錄明細")
        top.configure(background="#faf4e0")

        self.top = top
        self.record = tk.StringVar()

        self.record_title = tk.Label(self.top)
        self.record_title.place(relx=0.117, rely=0.089, height=21, width=466)
        self.record_title.configure(background="#faf4e0")
        self.record_title.configure(compound='center')
        self.record_title.configure(disabledforeground="#a3a3a3")
        self.record_title.configure(font="-family {微軟正黑體} -size 12 -weight bold")
        self.record_title.configure(foreground="#000000")
        self.record_title.configure(text='''消費紀錄明細''')
        self.showRecord = tk.Listbox(self.top)
        self.showRecord.place(relx=0.15, rely=0.2, relheight=0.689
                , relwidth=0.74)
        self.showRecord.configure(background="#fdfbf4")
        self.showRecord.configure(disabledforeground="#a3a3a3")
        self.showRecord.configure(font="TkFixedFont")
        self.showRecord.configure(foreground="#000000")
        self.showRecord.configure(listvariable=self.record)

        for i in range(0,len(record.showRecordList())):
            self.showRecord.insert(tk.END, record.showRecordList()[i])



 
def demand_analysis():

    from tkinter import ttk 
    window1 = tk.Tk()
    
    window1.title("客觀分析")
    window1.geometry('380x400')
    window1.configure(bg = "lightblue")
    test1 = tk.Entry(window1,show="")
    test2 = tk.Entry(window1,show="")
    test3 = tk.Entry(window1,show="")

    test4 = tk.Entry(window1,show="")

    namelist = df.iloc[:, 0].tolist()
    kindlist = df.iloc[:, 1].tolist()
    pricelist = df.iloc[:, 2].tolist()
    list = df.values.tolist()

    name = ""
    foodsum=0
    dailysum =0
    clothsum =0
    statsum=0
    foodcount =0 
    dailycount =0
    clothcount =0
    statcount = 0
    for sub_list in list:
        if sub_list[1]=="食物":
            foodsum = foodsum + sub_list[2]
        if sub_list[1]=="飲料":
            dailysum = dailysum + sub_list[2]
        if sub_list[1]=="服裝":
            clothsum = clothsum + sub_list[2]
        if sub_list[1]=="文具":
           statsum =statsum + sub_list[2]






    for string in kindlist:
        
        if string == "食物" :
            foodcount = foodcount+1

        if string == "飲料" :
            dailycount = dailycount+1
        if string == "服裝" :
            clothcount = clothcount+1
        if string == "文具" :
            statcount = statcount+1
        




   
    

    label1= tk.Label(window1,text="請輸入想購買的商品名稱")
    label2= tk.Label(window1,text="請輸入想購買的商品價錢")
    label3= tk.Label(window1,text="請選擇商品類型")
    label4= tk.Label(window1,text="請問此商品是否有折扣\n(有請輸入數字 無則輸入無)")
    label5= tk.Label(window1,text="請輸入你的月薪")
    namelabel = tk.Label(window1)
    kindlabel = tk.Label(window1)

    

    
    
    
    
    
   
    def barcode():
    

        time1 = (time.strftime("%Y!%m@%d(%H*%M)%S`", time.localtime()))
        time2 = time1.replace('!', '年')
        time3 = time2.replace('@', '月')
        time4 = time3.replace('(', '日')
        time5 = time4.replace('*', '時')
        time6 = time5.replace(')', '分')
        timenow = time6.replace('`', '秒')

        
        barcodeData1 = ''

        found = set()
        capture = cv2.VideoCapture(0,cv2.CAP_DSHOW)
        Files = "qrcode+barcode.dat"#新建一個日誌

        while(1):
            ret,frame = capture.read()
            test = pyzbar.decode(frame)
            gray = cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)
            barcodes = pyzbar.decode(gray)

            for barcode in barcodes:
                (x, y, w, h) = barcode.rect
                cv2.rectangle(frame, (x, y), (x + w, y + h), (255, 255, 0), 2)
                barcodeData = barcode.data.decode("utf-8")
                barcodeType = barcode.type

                if barcodeData=='' or barcodeData!=barcodeData1:
                    barcodeData1 = barcodeData
                    #======================可以不需要，這是在圖片上進行標註，裡面採用了字型檔案==============================
                    img_PIL = Image.fromarray(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))
                    font = ImageFont.truetype('arialbd.ttf', 25)#前面是字型檔案，後面是字號
                    fillColor = (0,255,0)
                    position = (x, y-25)
                    strl = barcodeData
                    draw = ImageDraw.Draw(img_PIL)
                    draw.text(position, strl,font=font,fill=fillColor)
                    img_PIL.save('Identification_results.jpg','jpeg')#儲存一張標記過的圖片

                    #====================================================
                    print("Recognize result>>> content： {0}".format(barcodeData))
                    
                    url = 'https://www.google.com.tw/?hl=zh_TW'
                    url = url.encode('ascii', 'ignore').decode('unicode_escape')
                    driver = webdriver.Chrome('./chromedriver.exe')
                    # 發出網路請求 連線到login頁面
                    driver.get(url)
                    # 等待 5 秒等網頁資料都載入後再抓取
                    
                    
                    # 再搜索框輸入要搜索的關鍵字
                    WebDriverWait(driver, 30).until(EC.presence_of_element_located((By.XPATH, '/html/body/div[1]/div[3]/form/div[1]/div[1]/div[1]/div/div[2]/input')))
                    elem = driver.find_element(By.NAME, 'q')
                    elem.send_keys(barcodeData)     
                    # Keys.RETURN 相當於鍵盤上的 Enter
                    elem.send_keys(Keys.RETURN)
                    

                    # # 抓出整頁內容
                    titles = []
                    contents = []

                    page_content = driver.page_source
                    results1 = driver.find_elements(By.CSS_SELECTOR,'h3')
                    
                    
                    # results2 = driver.find_element(By.XPATH,'//*[@id="rso"]/div[2]/div/div/div[2]/div/span')

                    
                    
                        



                    
                    titles.append(results1[1].text)
                    
                    
                    namelabel.config(text=results1[1].text) 

                    
                    kind = category(results1[1].text)
                    kindlabel.config(text=kind)


                  
                    namelabel.place(x=190,y=80)
                    kindlabel.place(x=190,y = 140)
                    # contents.append(results2.text)   
                    print(f'titles: {titles} ')
                    

                                       
                else:
                    pass

                if barcodeType not in found or barcodeData not in found:
                    with open(Files,'a+') as w:
                        csv_write = csv.writer(w)
                        date = ['型別：'+barcodeType+'  識別結果：'+barcodeData+'   時間：'+timenow]
                        csv_write.writerow(date)
                    found.add(barcodeData)
            cv2.imshow('qrcode+barcode',frame)
            
            k = cv2.waitKey(1)

            if cv2.waitKey(25) & 0xFF == ord('q'):
                break
        
        return results1[1].text
    





        
    def get_var():
        result = tk.Tk()
        result.geometry('380x400')
        
        price =int(test2.get())
        kind = kindlabel.cget("text") #food drink clothes stationary
        
        name_label = tk.Label(result,text="想購買的商品:"+namelabel.cget("text"))

        if test3.get() == "無":
            sale = int(1)
            sale_label = tk.Label(result,text="目前沒有折扣，建議等有優惠再買")
            
        else:
            sale = float(test3.get())
            salenum = sale*10
            sale_label = tk.Label(result,text="目前有打折 ,趁有優惠買比較划算喔~")
            
        salary  = float(test4.get())
        new = int(price*sale)

        price_label = tk.Label(result,text="價格:"+str(new))

        pro_result = round(price*sale/salary,2)

        pro_label = tk.Label(result,text="此商品所佔月薪比例為"+str(pro_result)+"倍")
    


        if str(kind) == "food":
            kind_label = tk.Label(result,text="食物類已購買了"+str(foodcount)+"樣, 總共"+str(foodsum)+"元")

        if str(kind) == "drink":
            kind_label = tk.Label(result,text="飲料類已購買了"+str(dailycount)+"樣, 總共"+str(dailysum)+"元")
            
        if str(kind) == "clothes":
            kind_label = tk.Label(result,text="服裝類已購買了"+str(clothcount)+"樣, 總共"+str(clothsum)+"元")  
        
        if str(kind) == "stationary":
            kind_label = tk.Label(result,text="文具類已購買了"+str(clothcount)+"樣, 總共"+str(clothsum)+"元")  












        
        name_label.place(x=100,y=10)
        price_label.place(x=100,y=40)
        sale_label.place(x=100,y=70)   
        pro_label.place(x=100,y=100)
        kind_label.place(x=100,y=130) 

    

        #propotion_label.place(x=100,y=100)
        

        



   

    cambutton = tk.Button(window1,text="掃描商品",command=barcode)
    calbutton = tk.Button(window1,text="開始分析",command=get_var)
    

    

    
    test2.place(x=190,y=110)
    test3.place(x=190,y=170)
    test4.place(x=190,y=210)



    label1.place(x=40,y=80)
    label2.place(x=40,y=110)
    label3.place(x=40,y=140)
    label4.place(x=30,y=170)
    label5.place(x=40,y=210)
    cambutton.place(x=120,y=240)
    calbutton.place(x=170,y=240)
    # combobox.place(x=190,y=140)



def category(str):
    
    classifier = pipeline("zero-shot-classification")

    # "可口可樂300ml"
    product = str

    cla = classifier(
        product,
        candidate_labels=["drink","food","clothes","stationary"],
    )

    scores = cla['scores']
    maxscore = max(cla['scores'])

    category = cla['labels'][scores.index(max(scores))]


    print(cla)
    return f'{category}'
    


        


def start_up():
    unknown_support.main()

if __name__ == '__main__':
    unknown_support.main()


